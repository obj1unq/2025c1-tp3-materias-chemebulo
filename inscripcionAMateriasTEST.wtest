import inscripcionAMaterias.*
import alumno.*
import carreras.*
import materias.*

describe "Inscripciones a materias - Pruebas de los requerimientos" {

    const roque = new Alumno()
    test "1. Registrar una materia aprobada por un estudiante indicando la nota obtenida." {

        sistemaDeInscripcion.aprobar(objetosI, 7, roque)
        assert.that(sistemaDeInscripcion.aprobo(objetosI, roque))
        assert.equals(7, sistemaDeInscripcion.nota(objetosI, roque))
    }

    test "2. De un estudiante se debería saber la cantidad de materias aprobadas, su promedio, y si tiene o no aprobada una materia." {

        assert.equals(0, sistemaDeInscripcion.cantidadDeMateriasAprobadasDe(roque))
        sistemaDeInscripcion.aprobar(objetosI, 8, roque)
        sistemaDeInscripcion.aprobar(matematicaI, 6, roque)

        assert.equals(2, sistemaDeInscripcion.cantidadDeMateriasAprobadasDe(roque))
        assert.equals(7, sistemaDeInscripcion.promedio(roque))

        assert.that(sistemaDeInscripcion.aprobo(objetosI, roque))
        assert.notThat(sistemaDeInscripcion.aprobo(objetosII, roque))
    }

    test "3. Si el estudiante ya tiene registrada la aprobación de la materia, lanza un error." {

        sistemaDeInscripcion.aprobar(objetosI, 8, roque)
        assert.throwsException({ sistemaDeInscripcion.aprobar(objetosI, 9, roque) })
        assert.doesNotThrowException({ sistemaDeInscripcion.aprobar(matematicaI, 10, roque) })
    }

    test "4. De un estudiante se debería saber la colección de materias de todas las carreras a las que está inscripto." {
        const materiasDeProgramacionYMedicina = programacion.materias() + medicina.materias()

        sistemaDeInscripcion.inscribirACarrera(programacion, roque)

        assert.that(sistemaDeInscripcion.seInscribioACarrera(programacion, roque))
        assert.that(sistemaDeInscripcion.materiasDeCarrerasInscriptas(roque) == programacion.materias())

        sistemaDeInscripcion.inscribirACarrera(medicina, roque)

        assert.that(sistemaDeInscripcion.seInscribioACarrera(medicina, roque))
        assert.that(sistemaDeInscripcion.materiasDeCarrerasInscriptas(roque) == materiasDeProgramacionYMedicina)
    }

    test "5. Un estudiante debería poder inscribirse a una materia en base a las cuatro condiciones planteadas en la consigna." {

        assert.notThat(sistemaDeInscripcion.puedeInscribirseA(objetosII, roque))

        sistemaDeInscripcion.inscribirACarrera(programacion, roque)
        assert.that(sistemaDeInscripcion.estaEnMateriasDeCarrerasInscriptas(objetosII, roque))
        assert.notThat(sistemaDeInscripcion.aprobo(objetosII, roque))
        assert.notThat(sistemaDeInscripcion.seInscribioAMateria(objetosII, roque))
        assert.notThat(sistemaDeInscripcion.tieneAprobadasLosRequisitoDe(objetosII, roque))

        sistemaDeInscripcion.aprobar(objetosI, 8, roque)
        sistemaDeInscripcion.aprobar(matematicaI, 10, roque)
        assert.that(sistemaDeInscripcion.tieneAprobadasLosRequisitoDe(objetosII, roque))
    }

    test "6. Si un estudiante se inscribe a una materia y no cumple con las condiciones, lanza un error; si las cumple y no hay cupo, termina en la lista de espera de la materia, si hay cupo, queda inscripto." {

    }
}

describe "Tests planteados en el final de la consigna" {

    const roque = new Alumno()
    const luisa = new Alumno()
    const romina = new Alumno()
    const alicia = new Alumno()
    const ana = new Alumno()

    method initialize() {

        sistemaDeInscripcion.inscribirACarrera(programacion, roque)
        sistemaDeInscripcion.inscribirACarrera(medicina, roque)
        sistemaDeInscripcion.inscribirACarrera(programacion, luisa)
        sistemaDeInscripcion.inscribirACarrera(programacion, romina)
        sistemaDeInscripcion.inscribirACarrera(programacion, alicia)
        sistemaDeInscripcion.inscribirACarrera(programacion, ana)

        sistemaDeInscripcion.aprobar(elementosDeProgramacion, 8, roque)
        sistemaDeInscripcion.aprobar(matematicaI, 9, roque)
        sistemaDeInscripcion.aprobar(objetosI, 7, roque)
        sistemaDeInscripcion.aprobar(basesDeDatos, 9, roque)
        sistemaDeInscripcion.aprobar(quimica, 7, roque)
        sistemaDeInscripcion.aprobar(biologiaI, 8, roque)

        sistemaDeInscripcion.aprobar(elementosDeProgramacion, 7, luisa)
        sistemaDeInscripcion.aprobar(objetosI, 7, luisa)
        sistemaDeInscripcion.aprobar(matematicaI, 6, luisa)

        sistemaDeInscripcion.aprobar(elementosDeProgramacion, 8, romina)
        sistemaDeInscripcion.aprobar(objetosI, 7, romina)
        sistemaDeInscripcion.aprobar(matematicaI, 7, romina)

        sistemaDeInscripcion.aprobar(elementosDeProgramacion, 7, alicia)
        sistemaDeInscripcion.aprobar(objetosI, 6, alicia)
        sistemaDeInscripcion.aprobar(matematicaI, 6, alicia)

        sistemaDeInscripcion.aprobar(elementosDeProgramacion, 9, ana)

        objetosII.cupo(3)
    }

    test "Prueba general de todo el funcionamiento (entiendo que no son varios test, sino uno solo)." {

        // Roque puede inscribirse en Objetos 2, pero no en Objetos 3 (porque le falta Objetos 2) ni en Objetos 1 (porque ya la tiene aprobada).

        assert.that(sistemaDeInscripcion.puedeInscribirseA(objetosII, roque))

        assert.notThat(sistemaDeInscripcion.aprobo(objetosII, roque))
        assert.notThat(sistemaDeInscripcion.puedeInscribirseA(objetosIII, roque))

        assert.that(sistemaDeInscripcion.aprobo(objetosI, roque))
        assert.notThat(sistemaDeInscripcion.puedeInscribirseA(objetosI, roque))


        // Roque puede inscribirse: en Programación, en Objetos 2 y Programación Concurrente; en Medicina, en Biología 2.



        // Si se inscriben, en este orden, Luisa, Romina, Alicia y Roque en Objetos 2, entonces las tres primeras quedan confirmadas, y Roque queda en lista de espera. 
    
        sistemaDeInscripcion.inscribirAMateria(objetosII, luisa)
        assert.that(objetosII.alumnosConfirmados().contains(luisa))

        sistemaDeInscripcion.inscribirAMateria(objetosII, romina)
        assert.that(objetosII.alumnosConfirmados().contains(romina))
        
        sistemaDeInscripcion.inscribirAMateria(objetosII, alicia)
        assert.that(objetosII.alumnosConfirmados().contains(alicia))
        
        sistemaDeInscripcion.inscribirAMateria(objetosII, roque)
        assert.notThat(objetosII.alumnosConfirmados().contains(roque))
        assert.that(objetosII.listaDeEspera().contains(roque))


        // Si después se da de baja Romina en Objetos 2, entonces Roque pasa a tener la inscripción confirmada en esa materia.

        sistemaDeInscripcion.darDeBaja(objetosII, romina)
        assert.notThat(objetosII.alumnosConfirmados().contains(romina))
        assert.that(objetosII.alumnosConfirmados().contains(roque))
    }
}