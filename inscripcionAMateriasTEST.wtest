import inscripcionAMaterias.*
import alumno.*
import carreras.*
import materias.*

describe "Inscripciones a materias - Pruebas de los requerimientos" {

    const roque = new Alumno()
    const pepon = new Alumno()

    test "1. Registrar una materia aprobada por un estudiante indicando la nota obtenida." {

        sistemaDeInscripcion.aprobar(objetosI, 7, roque)
        assert.that(sistemaDeInscripcion.aprobo(objetosI, roque))
        assert.equals(7, sistemaDeInscripcion.nota(objetosI, roque))
    }

    test "2. De un estudiante se debería saber la cantidad de materias aprobadas, su promedio, y si tiene o no aprobada una materia." {

        assert.equals(0, sistemaDeInscripcion.cantidadDeMateriasAprobadasDe(roque))
        sistemaDeInscripcion.aprobar(objetosI, 8, roque)
        sistemaDeInscripcion.aprobar(matematicaI, 6, roque)

        assert.equals(2, sistemaDeInscripcion.cantidadDeMateriasAprobadasDe(roque))
        assert.equals(7, sistemaDeInscripcion.promedio(roque))

        assert.that(sistemaDeInscripcion.aprobo(objetosI, roque))
        assert.notThat(sistemaDeInscripcion.aprobo(objetosII, roque))
    }

    test "3. Si el estudiante ya tiene registrada la aprobación de la materia, lanza un error." {

        sistemaDeInscripcion.aprobar(objetosI, 8, roque)
        assert.throwsException({ sistemaDeInscripcion.aprobar(objetosI, 9, roque) })
        assert.doesNotThrowException({ sistemaDeInscripcion.aprobar(matematicaI, 10, roque) })
    }

    test "4. De un estudiante se debería saber la colección de materias de todas las carreras a las que está inscripto." {

        const materiasDeProgramacionYMedicina = programacion.materias() + medicina.materias()

        sistemaDeInscripcion.inscribirACarrera(programacion, roque)

        assert.that(sistemaDeInscripcion.estaInscriptoEnCarrera(programacion, roque))
        assert.that(sistemaDeInscripcion.materiasDeCarrerasInscriptas(roque) == programacion.materias())

        sistemaDeInscripcion.inscribirACarrera(medicina, roque)

        assert.that(sistemaDeInscripcion.estaInscriptoEnCarrera(medicina, roque))
        assert.that(sistemaDeInscripcion.materiasDeCarrerasInscriptas(roque) == materiasDeProgramacionYMedicina)
    }

    test "5. Un estudiante debería poder inscribirse a una materia en base a las cuatro condiciones planteadas en la consigna." {

        assert.notThat(sistemaDeInscripcion.puedeInscribirseA(objetosII, roque))

        sistemaDeInscripcion.inscribirACarrera(programacion, roque)
        assert.that(sistemaDeInscripcion.estaEnMateriasDeCarrerasInscriptas(objetosII, roque))
        assert.notThat(sistemaDeInscripcion.aprobo(objetosII, roque))
        assert.notThat(sistemaDeInscripcion.estaInscriptoEnMateria(objetosII, roque))

        sistemaDeInscripcion.aprobar(objetosI, 8, roque)
        sistemaDeInscripcion.aprobar(matematicaI, 10, roque)
        sistemaDeInscripcion.aprobar(elementosDeProgramacion, 6, roque)
        sistemaDeInscripcion.aprobar(basesDeDatos, 9, roque)
        assert.that(sistemaDeInscripcion.cumpleElRequisitoDe(objetosII, roque))
    }

    test "6. Si un estudiante se inscribe a una materia y no cumple con las condiciones, lanza un error; si las cumple y no hay cupo, termina en la lista de espera de la materia, si hay cupo, queda inscripto." {
        
        matematicaI.cupo(1)

        assert.throwsException({ sistemaDeInscripcion.inscribirAMateria(objetosII, roque) })

        sistemaDeInscripcion.inscribirACarrera(programacion, roque)
        sistemaDeInscripcion.inscribirACarrera(programacion, pepon)
        sistemaDeInscripcion.inscribirAMateria(matematicaI, roque)
        sistemaDeInscripcion.inscribirAMateria(matematicaI, pepon)

        assert.that(sistemaDeInscripcion.alumnosInscriptosEn(matematicaI).contains(roque))
        assert.that(sistemaDeInscripcion.alumnosEnEsperaEn(matematicaI).contains(pepon))
    }

    test "7. Se debe poder dar de baja un estudiante de una materia. En caso de haber estudiantes en lista de espera, el primer estudiante de la lista debe obtener su lugar en la materia." {
        
        objetosI.cupo(1)

        sistemaDeInscripcion.inscribirACarrera(programacion, roque)
        sistemaDeInscripcion.inscribirACarrera(programacion, pepon)

        sistemaDeInscripcion.inscribirAMateria(objetosI, roque)
        sistemaDeInscripcion.inscribirAMateria(objetosI, pepon)

        assert.that(sistemaDeInscripcion.alumnosEnEsperaEn(objetosI).contains(pepon))
        assert.that(sistemaDeInscripcion.alumnosInscriptosEn(objetosI).contains(roque))

        sistemaDeInscripcion.darDeBaja(objetosI, roque)
        assert.that(sistemaDeInscripcion.alumnosInscriptosEn(objetosI).contains(pepon))
        assert.that(sistemaDeInscripcion.alumnosEnEsperaEn(objetosI).isEmpty())
    }

    test "8. El sistema debe poder brindar los resultados de la inscripción: los estudiantes inscriptos a una materia dada, y los estudiantes en lista de espera para una materia dada." {
        
        basesDeDatos.cupo(1)

        sistemaDeInscripcion.inscribirACarrera(programacion, roque)
        sistemaDeInscripcion.inscribirACarrera(programacion, pepon)
        
        sistemaDeInscripcion.inscribirAMateria(basesDeDatos, roque)
        sistemaDeInscripcion.inscribirAMateria(basesDeDatos, pepon)
        assert.that(sistemaDeInscripcion.alumnosInscriptosEn(basesDeDatos) == [roque])
        assert.that(sistemaDeInscripcion.alumnosEnEsperaEn(basesDeDatos) == [pepon])
    }

    test "9. Un estudiante debe saber decir las materias en las que está inscripto y las materias en las que quedó en lista de espera." {

        objetosI.cupo(1)

        sistemaDeInscripcion.inscribirACarrera(programacion, roque)
        sistemaDeInscripcion.inscribirACarrera(programacion, pepon)

        sistemaDeInscripcion.inscribirAMateria(objetosI, roque)
        sistemaDeInscripcion.inscribirAMateria(objetosI, pepon)

        assert.that(sistemaDeInscripcion.materiasEnEspera(roque).isEmpty())
        assert.that(sistemaDeInscripcion.materiasEnEspera(pepon) == [objetosI])

        assert.that(sistemaDeInscripcion.materiasInscriptas(roque) == [objetosI])
        assert.that(sistemaDeInscripcion.materiasInscriptas(pepon).isEmpty())
    }
 
    //  [matematicaI, basesDeDatos, objetosI]

    test "10. Un estudiante debe saber decir todas las materias a las que se puede inscribir." {

        const materiasQueSePuedeInscribir = sistemaDeInscripcion.materiasALaQueSePuedeInscribir(roque)
        const materiasQueDeberiaPoderInscribirse = [elementosDeProgramacion, matematicaI, basesDeDatos, objetosI]

        sistemaDeInscripcion.inscribirACarrera(programacion, roque)
        assert.that(materiasQueSePuedeInscribir.all({materia => materiasQueDeberiaPoderInscribirse.contains(materia)}))

        sistemaDeInscripcion.aprobar(elementosDeProgramacion, 8, roque)
        assert.notThat(sistemaDeInscripcion.materiasALaQueSePuedeInscribir(roque).contains(elementosDeProgramacion))
    }
}

describe "Inscripciones a materias - Tests planteados en el final de la consigna." {

    const roque = new Alumno()
    const luisa = new Alumno()
    const romina = new Alumno()
    const alicia = new Alumno()
    const ana = new Alumno()

    method initialize() {

        sistemaDeInscripcion.inscribirACarrera(programacion, roque)
        sistemaDeInscripcion.inscribirACarrera(medicina, roque)
        sistemaDeInscripcion.inscribirACarrera(programacion, luisa)
        sistemaDeInscripcion.inscribirACarrera(programacion, romina)
        sistemaDeInscripcion.inscribirACarrera(programacion, alicia)
        sistemaDeInscripcion.inscribirACarrera(programacion, ana)

        sistemaDeInscripcion.aprobar(elementosDeProgramacion, 8, roque)
        sistemaDeInscripcion.aprobar(matematicaI, 9, roque)
        sistemaDeInscripcion.aprobar(objetosI, 7, roque)
        sistemaDeInscripcion.aprobar(basesDeDatos, 9, roque)
        sistemaDeInscripcion.aprobar(quimica, 7, roque)
        sistemaDeInscripcion.aprobar(biologiaI, 8, roque)

        sistemaDeInscripcion.aprobar(elementosDeProgramacion, 7, luisa)
        sistemaDeInscripcion.aprobar(objetosI, 7, luisa)
        sistemaDeInscripcion.aprobar(matematicaI, 6, luisa)

        sistemaDeInscripcion.aprobar(elementosDeProgramacion, 8, romina)
        sistemaDeInscripcion.aprobar(objetosI, 7, romina)
        sistemaDeInscripcion.aprobar(matematicaI, 7, romina)

        sistemaDeInscripcion.aprobar(elementosDeProgramacion, 7, alicia)
        sistemaDeInscripcion.aprobar(objetosI, 6, alicia)
        sistemaDeInscripcion.aprobar(matematicaI, 6, alicia)

        sistemaDeInscripcion.aprobar(elementosDeProgramacion, 9, ana)

        objetosII.cupo(3)
    }

    test "Funcionamiento general del sistema de inscripción." {

        // Roque puede inscribirse en Objetos 2, pero no en Objetos 3 (porque le falta Objetos 2) ni en Objetos 1 (porque ya la tiene aprobada).

        assert.that(sistemaDeInscripcion.puedeInscribirseA(objetosII, roque))

        assert.notThat(sistemaDeInscripcion.aprobo(objetosII, roque))
        assert.notThat(sistemaDeInscripcion.puedeInscribirseA(objetosIII, roque))

        assert.that(sistemaDeInscripcion.aprobo(objetosI, roque))
        assert.notThat(sistemaDeInscripcion.puedeInscribirseA(objetosI, roque))


        // Roque puede inscribirse: en Programación, en Objetos 2 y Programación Concurrente; en Medicina, en Biología 2.

        assert.that(sistemaDeInscripcion.puedeInscribirseA(objetosII, roque))
        assert.that(sistemaDeInscripcion.puedeInscribirseA(programacionConcurrente, roque))
        assert.that(sistemaDeInscripcion.puedeInscribirseA(biologiaII, roque))


        // Si se inscriben, en este orden, Luisa, Romina, Alicia y Roque en Objetos 2, entonces las tres primeras quedan confirmadas, y Roque queda en lista de espera. 
    
        sistemaDeInscripcion.inscribirAMateria(objetosII, luisa)
        assert.that(sistemaDeInscripcion.alumnosInscriptosEn(objetosII).contains(luisa))

        sistemaDeInscripcion.inscribirAMateria(objetosII, romina)
        assert.that(sistemaDeInscripcion.alumnosInscriptosEn(objetosII).contains(romina))
        
        sistemaDeInscripcion.inscribirAMateria(objetosII, alicia)
        assert.that(sistemaDeInscripcion.alumnosInscriptosEn(objetosII).contains(alicia))
        
        sistemaDeInscripcion.inscribirAMateria(objetosII, roque)
        assert.notThat(sistemaDeInscripcion.alumnosInscriptosEn(objetosII).contains(roque))
        assert.that(sistemaDeInscripcion.alumnosEnEsperaEn(objetosII).contains(roque))


        // Si después se da de baja Romina en Objetos 2, entonces Roque pasa a tener la inscripción confirmada en esa materia.

        sistemaDeInscripcion.darDeBaja(objetosII, romina)
        assert.notThat(sistemaDeInscripcion.alumnosInscriptosEn(objetosII).contains(romina))
        assert.that(sistemaDeInscripcion.alumnosInscriptosEn(objetosII).contains(roque))
    }
}

describe "Implementación del bonus" {

    const roque = new Alumno()
    const pepon = new Alumno()
    const jorge = new Alumno()

    method initialize() {
        sistemaDeInscripcion.inscribirACarrera(programacion, roque)
        sistemaDeInscripcion.inscribirACarrera(programacion, pepon)
        sistemaDeInscripcion.inscribirACarrera(programacion, jorge)

        sistemaDeInscripcion.aprobar(elementosDeProgramacion, 9, roque)
        sistemaDeInscripcion.aprobar(matematicaI, 10, roque)
        sistemaDeInscripcion.aprobar(basesDeDatos, 10, roque)

        sistemaDeInscripcion.aprobar(basesDeDatos, 8, pepon)

        sistemaDeInscripcion.aprobar(elementosDeProgramacion, 10, jorge)
        sistemaDeInscripcion.aprobar(basesDeDatos, 8, jorge)

        objetosI.cupo(1)
    }

    test "La materias tienen sus requisitos propios: por cantidad de créditos, por año, o ninguno."{
        
        assert.that(sistemaDeInscripcion.cumpleElRequisitoDe(objetosI, roque))
        assert.notThat(sistemaDeInscripcion.cumpleElRequisitoDe(trabajoFinal, roque))
    }

    test "Las materias tienen diferentes maneras de manejar su lista de espera: orden de llegada." {

        sistemaDeInscripcion.inscribirAMateria(objetosI, pepon)
        sistemaDeInscripcion.inscribirAMateria(objetosI, roque)
        assert.notThat(sistemaDeInscripcion.alumnosInscriptosEn(objetosI).contains(roque))
        assert.that(sistemaDeInscripcion.alumnosEnEsperaEn(objetosI).contains(roque))
    }


    test "Las materias tienen diferentes maneras de manejar su lista de espera: elitista." {

        objetosI.estrategia(elitista)

        sistemaDeInscripcion.inscribirAMateria(objetosI, roque)
        sistemaDeInscripcion.inscribirAMateria(objetosI, pepon)
        sistemaDeInscripcion.inscribirAMateria(objetosI, jorge)
        sistemaDeInscripcion.darDeBaja(objetosI, roque)
        assert.that(sistemaDeInscripcion.alumnosInscriptosEn(objetosI).contains(jorge))
    }

    test "Las materias tienen diferentes maneras de manejar su lista de espera: grado de avance." {

        objetosI.estrategia(gradoDeAvance)

        sistemaDeInscripcion.inscribirAMateria(objetosI, jorge)
        sistemaDeInscripcion.inscribirAMateria(objetosI, pepon)
        sistemaDeInscripcion.inscribirAMateria(objetosI, roque)
        sistemaDeInscripcion.darDeBaja(objetosI, jorge)
        assert.that(sistemaDeInscripcion.alumnosInscriptosEn(objetosI).contains(roque))
    }
}